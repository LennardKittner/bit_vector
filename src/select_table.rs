
#[cfg(feature = "USE_SELECT_TABLE")]
/// maps a byte b and an index j to the index of the j-th zero inside b
const LOOKUP_TABLE_ZERO: [[u8; 8]; 256] = [[0, 1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8, 9], [0, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9, 10], [0, 1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8, 9], [0, 2, 4, 5, 6, 7, 8, 9], [2, 4, 5, 6, 7, 8, 9, 10], [0, 1, 4, 5, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8, 9, 10], [0, 4, 5, 6, 7, 8, 9, 10], [4, 5, 6, 7, 8, 9, 10, 11], [0, 1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8, 9], [0, 2, 3, 5, 6, 7, 8, 9], [2, 3, 5, 6, 7, 8, 9, 10], [0, 1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 9, 10], [0, 3, 5, 6, 7, 8, 9, 10], [3, 5, 6, 7, 8, 9, 10, 11], [0, 1, 2, 5, 6, 7, 8, 9], [1, 2, 5, 6, 7, 8, 9, 10], [0, 2, 5, 6, 7, 8, 9, 10], [2, 5, 6, 7, 8, 9, 10, 11], [0, 1, 5, 6, 7, 8, 9, 10], [1, 5, 6, 7, 8, 9, 10, 11], [0, 5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 9], [0, 2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 6, 7, 8, 9, 10], [0, 1, 3, 4, 6, 7, 8, 9], [1, 3, 4, 6, 7, 8, 9, 10], [0, 3, 4, 6, 7, 8, 9, 10], [3, 4, 6, 7, 8, 9, 10, 11], [0, 1, 2, 4, 6, 7, 8, 9], [1, 2, 4, 6, 7, 8, 9, 10], [0, 2, 4, 6, 7, 8, 9, 10], [2, 4, 6, 7, 8, 9, 10, 11], [0, 1, 4, 6, 7, 8, 9, 10], [1, 4, 6, 7, 8, 9, 10, 11], [0, 4, 6, 7, 8, 9, 10, 11], [4, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 6, 7, 8, 9], [1, 2, 3, 6, 7, 8, 9, 10], [0, 2, 3, 6, 7, 8, 9, 10], [2, 3, 6, 7, 8, 9, 10, 11], [0, 1, 3, 6, 7, 8, 9, 10], [1, 3, 6, 7, 8, 9, 10, 11], [0, 3, 6, 7, 8, 9, 10, 11], [3, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 6, 7, 8, 9, 10], [1, 2, 6, 7, 8, 9, 10, 11], [0, 2, 6, 7, 8, 9, 10, 11], [2, 6, 7, 8, 9, 10, 11, 12], [0, 1, 6, 7, 8, 9, 10, 11], [1, 6, 7, 8, 9, 10, 11, 12], [0, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8, 9], [0, 2, 3, 4, 5, 7, 8, 9], [2, 3, 4, 5, 7, 8, 9, 10], [0, 1, 3, 4, 5, 7, 8, 9], [1, 3, 4, 5, 7, 8, 9, 10], [0, 3, 4, 5, 7, 8, 9, 10], [3, 4, 5, 7, 8, 9, 10, 11], [0, 1, 2, 4, 5, 7, 8, 9], [1, 2, 4, 5, 7, 8, 9, 10], [0, 2, 4, 5, 7, 8, 9, 10], [2, 4, 5, 7, 8, 9, 10, 11], [0, 1, 4, 5, 7, 8, 9, 10], [1, 4, 5, 7, 8, 9, 10, 11], [0, 4, 5, 7, 8, 9, 10, 11], [4, 5, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 5, 7, 8, 9], [1, 2, 3, 5, 7, 8, 9, 10], [0, 2, 3, 5, 7, 8, 9, 10], [2, 3, 5, 7, 8, 9, 10, 11], [0, 1, 3, 5, 7, 8, 9, 10], [1, 3, 5, 7, 8, 9, 10, 11], [0, 3, 5, 7, 8, 9, 10, 11], [3, 5, 7, 8, 9, 10, 11, 12], [0, 1, 2, 5, 7, 8, 9, 10], [1, 2, 5, 7, 8, 9, 10, 11], [0, 2, 5, 7, 8, 9, 10, 11], [2, 5, 7, 8, 9, 10, 11, 12], [0, 1, 5, 7, 8, 9, 10, 11], [1, 5, 7, 8, 9, 10, 11, 12], [0, 5, 7, 8, 9, 10, 11, 12], [5, 7, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 4, 7, 8, 9], [1, 2, 3, 4, 7, 8, 9, 10], [0, 2, 3, 4, 7, 8, 9, 10], [2, 3, 4, 7, 8, 9, 10, 11], [0, 1, 3, 4, 7, 8, 9, 10], [1, 3, 4, 7, 8, 9, 10, 11], [0, 3, 4, 7, 8, 9, 10, 11], [3, 4, 7, 8, 9, 10, 11, 12], [0, 1, 2, 4, 7, 8, 9, 10], [1, 2, 4, 7, 8, 9, 10, 11], [0, 2, 4, 7, 8, 9, 10, 11], [2, 4, 7, 8, 9, 10, 11, 12], [0, 1, 4, 7, 8, 9, 10, 11], [1, 4, 7, 8, 9, 10, 11, 12], [0, 4, 7, 8, 9, 10, 11, 12], [4, 7, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 7, 8, 9, 10], [1, 2, 3, 7, 8, 9, 10, 11], [0, 2, 3, 7, 8, 9, 10, 11], [2, 3, 7, 8, 9, 10, 11, 12], [0, 1, 3, 7, 8, 9, 10, 11], [1, 3, 7, 8, 9, 10, 11, 12], [0, 3, 7, 8, 9, 10, 11, 12], [3, 7, 8, 9, 10, 11, 12, 13], [0, 1, 2, 7, 8, 9, 10, 11], [1, 2, 7, 8, 9, 10, 11, 12], [0, 2, 7, 8, 9, 10, 11, 12], [2, 7, 8, 9, 10, 11, 12, 13], [0, 1, 7, 8, 9, 10, 11, 12], [1, 7, 8, 9, 10, 11, 12, 13], [0, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 9], [0, 2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9, 10], [0, 1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 9, 10], [0, 3, 4, 5, 6, 8, 9, 10], [3, 4, 5, 6, 8, 9, 10, 11], [0, 1, 2, 4, 5, 6, 8, 9], [1, 2, 4, 5, 6, 8, 9, 10], [0, 2, 4, 5, 6, 8, 9, 10], [2, 4, 5, 6, 8, 9, 10, 11], [0, 1, 4, 5, 6, 8, 9, 10], [1, 4, 5, 6, 8, 9, 10, 11], [0, 4, 5, 6, 8, 9, 10, 11], [4, 5, 6, 8, 9, 10, 11, 12], [0, 1, 2, 3, 5, 6, 8, 9], [1, 2, 3, 5, 6, 8, 9, 10], [0, 2, 3, 5, 6, 8, 9, 10], [2, 3, 5, 6, 8, 9, 10, 11], [0, 1, 3, 5, 6, 8, 9, 10], [1, 3, 5, 6, 8, 9, 10, 11], [0, 3, 5, 6, 8, 9, 10, 11], [3, 5, 6, 8, 9, 10, 11, 12], [0, 1, 2, 5, 6, 8, 9, 10], [1, 2, 5, 6, 8, 9, 10, 11], [0, 2, 5, 6, 8, 9, 10, 11], [2, 5, 6, 8, 9, 10, 11, 12], [0, 1, 5, 6, 8, 9, 10, 11], [1, 5, 6, 8, 9, 10, 11, 12], [0, 5, 6, 8, 9, 10, 11, 12], [5, 6, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 4, 6, 8, 9], [1, 2, 3, 4, 6, 8, 9, 10], [0, 2, 3, 4, 6, 8, 9, 10], [2, 3, 4, 6, 8, 9, 10, 11], [0, 1, 3, 4, 6, 8, 9, 10], [1, 3, 4, 6, 8, 9, 10, 11], [0, 3, 4, 6, 8, 9, 10, 11], [3, 4, 6, 8, 9, 10, 11, 12], [0, 1, 2, 4, 6, 8, 9, 10], [1, 2, 4, 6, 8, 9, 10, 11], [0, 2, 4, 6, 8, 9, 10, 11], [2, 4, 6, 8, 9, 10, 11, 12], [0, 1, 4, 6, 8, 9, 10, 11], [1, 4, 6, 8, 9, 10, 11, 12], [0, 4, 6, 8, 9, 10, 11, 12], [4, 6, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 6, 8, 9, 10], [1, 2, 3, 6, 8, 9, 10, 11], [0, 2, 3, 6, 8, 9, 10, 11], [2, 3, 6, 8, 9, 10, 11, 12], [0, 1, 3, 6, 8, 9, 10, 11], [1, 3, 6, 8, 9, 10, 11, 12], [0, 3, 6, 8, 9, 10, 11, 12], [3, 6, 8, 9, 10, 11, 12, 13], [0, 1, 2, 6, 8, 9, 10, 11], [1, 2, 6, 8, 9, 10, 11, 12], [0, 2, 6, 8, 9, 10, 11, 12], [2, 6, 8, 9, 10, 11, 12, 13], [0, 1, 6, 8, 9, 10, 11, 12], [1, 6, 8, 9, 10, 11, 12, 13], [0, 6, 8, 9, 10, 11, 12, 13], [6, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 9, 10], [0, 2, 3, 4, 5, 8, 9, 10], [2, 3, 4, 5, 8, 9, 10, 11], [0, 1, 3, 4, 5, 8, 9, 10], [1, 3, 4, 5, 8, 9, 10, 11], [0, 3, 4, 5, 8, 9, 10, 11], [3, 4, 5, 8, 9, 10, 11, 12], [0, 1, 2, 4, 5, 8, 9, 10], [1, 2, 4, 5, 8, 9, 10, 11], [0, 2, 4, 5, 8, 9, 10, 11], [2, 4, 5, 8, 9, 10, 11, 12], [0, 1, 4, 5, 8, 9, 10, 11], [1, 4, 5, 8, 9, 10, 11, 12], [0, 4, 5, 8, 9, 10, 11, 12], [4, 5, 8, 9, 10, 11, 12, 13], [0, 1, 2, 3, 5, 8, 9, 10], [1, 2, 3, 5, 8, 9, 10, 11], [0, 2, 3, 5, 8, 9, 10, 11], [2, 3, 5, 8, 9, 10, 11, 12], [0, 1, 3, 5, 8, 9, 10, 11], [1, 3, 5, 8, 9, 10, 11, 12], [0, 3, 5, 8, 9, 10, 11, 12], [3, 5, 8, 9, 10, 11, 12, 13], [0, 1, 2, 5, 8, 9, 10, 11], [1, 2, 5, 8, 9, 10, 11, 12], [0, 2, 5, 8, 9, 10, 11, 12], [2, 5, 8, 9, 10, 11, 12, 13], [0, 1, 5, 8, 9, 10, 11, 12], [1, 5, 8, 9, 10, 11, 12, 13], [0, 5, 8, 9, 10, 11, 12, 13], [5, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4, 8, 9, 10], [1, 2, 3, 4, 8, 9, 10, 11], [0, 2, 3, 4, 8, 9, 10, 11], [2, 3, 4, 8, 9, 10, 11, 12], [0, 1, 3, 4, 8, 9, 10, 11], [1, 3, 4, 8, 9, 10, 11, 12], [0, 3, 4, 8, 9, 10, 11, 12], [3, 4, 8, 9, 10, 11, 12, 13], [0, 1, 2, 4, 8, 9, 10, 11], [1, 2, 4, 8, 9, 10, 11, 12], [0, 2, 4, 8, 9, 10, 11, 12], [2, 4, 8, 9, 10, 11, 12, 13], [0, 1, 4, 8, 9, 10, 11, 12], [1, 4, 8, 9, 10, 11, 12, 13], [0, 4, 8, 9, 10, 11, 12, 13], [4, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 8, 9, 10, 11], [1, 2, 3, 8, 9, 10, 11, 12], [0, 2, 3, 8, 9, 10, 11, 12], [2, 3, 8, 9, 10, 11, 12, 13], [0, 1, 3, 8, 9, 10, 11, 12], [1, 3, 8, 9, 10, 11, 12, 13], [0, 3, 8, 9, 10, 11, 12, 13], [3, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 8, 9, 10, 11, 12], [1, 2, 8, 9, 10, 11, 12, 13], [0, 2, 8, 9, 10, 11, 12, 13], [2, 8, 9, 10, 11, 12, 13, 14], [0, 1, 8, 9, 10, 11, 12, 13], [1, 8, 9, 10, 11, 12, 13, 14], [0, 8, 9, 10, 11, 12, 13, 14], [8, 9, 10, 11, 12, 13, 14, 15]];

#[cfg(feature = "USE_SELECT_TABLE")]
/// maps a byte b and an index j to the index of the j-th zero inside b
const LOOKUP_TABLE_ONE: [[u8; 8]; 256] = [[255, 255, 255, 255, 255, 255, 255, 255], [0, 255, 255, 255, 255, 255, 255, 255], [1, 255, 255, 255, 255, 255, 255, 255], [0, 1, 255, 255, 255, 255, 255, 255], [2, 255, 255, 255, 255, 255, 255, 255], [0, 2, 255, 255, 255, 255, 255, 255], [1, 2, 255, 255, 255, 255, 255, 255], [0, 1, 2, 255, 255, 255, 255, 255], [3, 255, 255, 255, 255, 255, 255, 255], [0, 3, 255, 255, 255, 255, 255, 255], [1, 3, 255, 255, 255, 255, 255, 255], [0, 1, 3, 255, 255, 255, 255, 255], [2, 3, 255, 255, 255, 255, 255, 255], [0, 2, 3, 255, 255, 255, 255, 255], [1, 2, 3, 255, 255, 255, 255, 255], [0, 1, 2, 3, 255, 255, 255, 255], [4, 255, 255, 255, 255, 255, 255, 255], [0, 4, 255, 255, 255, 255, 255, 255], [1, 4, 255, 255, 255, 255, 255, 255], [0, 1, 4, 255, 255, 255, 255, 255], [2, 4, 255, 255, 255, 255, 255, 255], [0, 2, 4, 255, 255, 255, 255, 255], [1, 2, 4, 255, 255, 255, 255, 255], [0, 1, 2, 4, 255, 255, 255, 255], [3, 4, 255, 255, 255, 255, 255, 255], [0, 3, 4, 255, 255, 255, 255, 255], [1, 3, 4, 255, 255, 255, 255, 255], [0, 1, 3, 4, 255, 255, 255, 255], [2, 3, 4, 255, 255, 255, 255, 255], [0, 2, 3, 4, 255, 255, 255, 255], [1, 2, 3, 4, 255, 255, 255, 255], [0, 1, 2, 3, 4, 255, 255, 255], [5, 255, 255, 255, 255, 255, 255, 255], [0, 5, 255, 255, 255, 255, 255, 255], [1, 5, 255, 255, 255, 255, 255, 255], [0, 1, 5, 255, 255, 255, 255, 255], [2, 5, 255, 255, 255, 255, 255, 255], [0, 2, 5, 255, 255, 255, 255, 255], [1, 2, 5, 255, 255, 255, 255, 255], [0, 1, 2, 5, 255, 255, 255, 255], [3, 5, 255, 255, 255, 255, 255, 255], [0, 3, 5, 255, 255, 255, 255, 255], [1, 3, 5, 255, 255, 255, 255, 255], [0, 1, 3, 5, 255, 255, 255, 255], [2, 3, 5, 255, 255, 255, 255, 255], [0, 2, 3, 5, 255, 255, 255, 255], [1, 2, 3, 5, 255, 255, 255, 255], [0, 1, 2, 3, 5, 255, 255, 255], [4, 5, 255, 255, 255, 255, 255, 255], [0, 4, 5, 255, 255, 255, 255, 255], [1, 4, 5, 255, 255, 255, 255, 255], [0, 1, 4, 5, 255, 255, 255, 255], [2, 4, 5, 255, 255, 255, 255, 255], [0, 2, 4, 5, 255, 255, 255, 255], [1, 2, 4, 5, 255, 255, 255, 255], [0, 1, 2, 4, 5, 255, 255, 255], [3, 4, 5, 255, 255, 255, 255, 255], [0, 3, 4, 5, 255, 255, 255, 255], [1, 3, 4, 5, 255, 255, 255, 255], [0, 1, 3, 4, 5, 255, 255, 255], [2, 3, 4, 5, 255, 255, 255, 255], [0, 2, 3, 4, 5, 255, 255, 255], [1, 2, 3, 4, 5, 255, 255, 255], [0, 1, 2, 3, 4, 5, 255, 255], [6, 255, 255, 255, 255, 255, 255, 255], [0, 6, 255, 255, 255, 255, 255, 255], [1, 6, 255, 255, 255, 255, 255, 255], [0, 1, 6, 255, 255, 255, 255, 255], [2, 6, 255, 255, 255, 255, 255, 255], [0, 2, 6, 255, 255, 255, 255, 255], [1, 2, 6, 255, 255, 255, 255, 255], [0, 1, 2, 6, 255, 255, 255, 255], [3, 6, 255, 255, 255, 255, 255, 255], [0, 3, 6, 255, 255, 255, 255, 255], [1, 3, 6, 255, 255, 255, 255, 255], [0, 1, 3, 6, 255, 255, 255, 255], [2, 3, 6, 255, 255, 255, 255, 255], [0, 2, 3, 6, 255, 255, 255, 255], [1, 2, 3, 6, 255, 255, 255, 255], [0, 1, 2, 3, 6, 255, 255, 255], [4, 6, 255, 255, 255, 255, 255, 255], [0, 4, 6, 255, 255, 255, 255, 255], [1, 4, 6, 255, 255, 255, 255, 255], [0, 1, 4, 6, 255, 255, 255, 255], [2, 4, 6, 255, 255, 255, 255, 255], [0, 2, 4, 6, 255, 255, 255, 255], [1, 2, 4, 6, 255, 255, 255, 255], [0, 1, 2, 4, 6, 255, 255, 255], [3, 4, 6, 255, 255, 255, 255, 255], [0, 3, 4, 6, 255, 255, 255, 255], [1, 3, 4, 6, 255, 255, 255, 255], [0, 1, 3, 4, 6, 255, 255, 255], [2, 3, 4, 6, 255, 255, 255, 255], [0, 2, 3, 4, 6, 255, 255, 255], [1, 2, 3, 4, 6, 255, 255, 255], [0, 1, 2, 3, 4, 6, 255, 255], [5, 6, 255, 255, 255, 255, 255, 255], [0, 5, 6, 255, 255, 255, 255, 255], [1, 5, 6, 255, 255, 255, 255, 255], [0, 1, 5, 6, 255, 255, 255, 255], [2, 5, 6, 255, 255, 255, 255, 255], [0, 2, 5, 6, 255, 255, 255, 255], [1, 2, 5, 6, 255, 255, 255, 255], [0, 1, 2, 5, 6, 255, 255, 255], [3, 5, 6, 255, 255, 255, 255, 255], [0, 3, 5, 6, 255, 255, 255, 255], [1, 3, 5, 6, 255, 255, 255, 255], [0, 1, 3, 5, 6, 255, 255, 255], [2, 3, 5, 6, 255, 255, 255, 255], [0, 2, 3, 5, 6, 255, 255, 255], [1, 2, 3, 5, 6, 255, 255, 255], [0, 1, 2, 3, 5, 6, 255, 255], [4, 5, 6, 255, 255, 255, 255, 255], [0, 4, 5, 6, 255, 255, 255, 255], [1, 4, 5, 6, 255, 255, 255, 255], [0, 1, 4, 5, 6, 255, 255, 255], [2, 4, 5, 6, 255, 255, 255, 255], [0, 2, 4, 5, 6, 255, 255, 255], [1, 2, 4, 5, 6, 255, 255, 255], [0, 1, 2, 4, 5, 6, 255, 255], [3, 4, 5, 6, 255, 255, 255, 255], [0, 3, 4, 5, 6, 255, 255, 255], [1, 3, 4, 5, 6, 255, 255, 255], [0, 1, 3, 4, 5, 6, 255, 255], [2, 3, 4, 5, 6, 255, 255, 255], [0, 2, 3, 4, 5, 6, 255, 255], [1, 2, 3, 4, 5, 6, 255, 255], [0, 1, 2, 3, 4, 5, 6, 255], [7, 255, 255, 255, 255, 255, 255, 255], [0, 7, 255, 255, 255, 255, 255, 255], [1, 7, 255, 255, 255, 255, 255, 255], [0, 1, 7, 255, 255, 255, 255, 255], [2, 7, 255, 255, 255, 255, 255, 255], [0, 2, 7, 255, 255, 255, 255, 255], [1, 2, 7, 255, 255, 255, 255, 255], [0, 1, 2, 7, 255, 255, 255, 255], [3, 7, 255, 255, 255, 255, 255, 255], [0, 3, 7, 255, 255, 255, 255, 255], [1, 3, 7, 255, 255, 255, 255, 255], [0, 1, 3, 7, 255, 255, 255, 255], [2, 3, 7, 255, 255, 255, 255, 255], [0, 2, 3, 7, 255, 255, 255, 255], [1, 2, 3, 7, 255, 255, 255, 255], [0, 1, 2, 3, 7, 255, 255, 255], [4, 7, 255, 255, 255, 255, 255, 255], [0, 4, 7, 255, 255, 255, 255, 255], [1, 4, 7, 255, 255, 255, 255, 255], [0, 1, 4, 7, 255, 255, 255, 255], [2, 4, 7, 255, 255, 255, 255, 255], [0, 2, 4, 7, 255, 255, 255, 255], [1, 2, 4, 7, 255, 255, 255, 255], [0, 1, 2, 4, 7, 255, 255, 255], [3, 4, 7, 255, 255, 255, 255, 255], [0, 3, 4, 7, 255, 255, 255, 255], [1, 3, 4, 7, 255, 255, 255, 255], [0, 1, 3, 4, 7, 255, 255, 255], [2, 3, 4, 7, 255, 255, 255, 255], [0, 2, 3, 4, 7, 255, 255, 255], [1, 2, 3, 4, 7, 255, 255, 255], [0, 1, 2, 3, 4, 7, 255, 255], [5, 7, 255, 255, 255, 255, 255, 255], [0, 5, 7, 255, 255, 255, 255, 255], [1, 5, 7, 255, 255, 255, 255, 255], [0, 1, 5, 7, 255, 255, 255, 255], [2, 5, 7, 255, 255, 255, 255, 255], [0, 2, 5, 7, 255, 255, 255, 255], [1, 2, 5, 7, 255, 255, 255, 255], [0, 1, 2, 5, 7, 255, 255, 255], [3, 5, 7, 255, 255, 255, 255, 255], [0, 3, 5, 7, 255, 255, 255, 255], [1, 3, 5, 7, 255, 255, 255, 255], [0, 1, 3, 5, 7, 255, 255, 255], [2, 3, 5, 7, 255, 255, 255, 255], [0, 2, 3, 5, 7, 255, 255, 255], [1, 2, 3, 5, 7, 255, 255, 255], [0, 1, 2, 3, 5, 7, 255, 255], [4, 5, 7, 255, 255, 255, 255, 255], [0, 4, 5, 7, 255, 255, 255, 255], [1, 4, 5, 7, 255, 255, 255, 255], [0, 1, 4, 5, 7, 255, 255, 255], [2, 4, 5, 7, 255, 255, 255, 255], [0, 2, 4, 5, 7, 255, 255, 255], [1, 2, 4, 5, 7, 255, 255, 255], [0, 1, 2, 4, 5, 7, 255, 255], [3, 4, 5, 7, 255, 255, 255, 255], [0, 3, 4, 5, 7, 255, 255, 255], [1, 3, 4, 5, 7, 255, 255, 255], [0, 1, 3, 4, 5, 7, 255, 255], [2, 3, 4, 5, 7, 255, 255, 255], [0, 2, 3, 4, 5, 7, 255, 255], [1, 2, 3, 4, 5, 7, 255, 255], [0, 1, 2, 3, 4, 5, 7, 255], [6, 7, 255, 255, 255, 255, 255, 255], [0, 6, 7, 255, 255, 255, 255, 255], [1, 6, 7, 255, 255, 255, 255, 255], [0, 1, 6, 7, 255, 255, 255, 255], [2, 6, 7, 255, 255, 255, 255, 255], [0, 2, 6, 7, 255, 255, 255, 255], [1, 2, 6, 7, 255, 255, 255, 255], [0, 1, 2, 6, 7, 255, 255, 255], [3, 6, 7, 255, 255, 255, 255, 255], [0, 3, 6, 7, 255, 255, 255, 255], [1, 3, 6, 7, 255, 255, 255, 255], [0, 1, 3, 6, 7, 255, 255, 255], [2, 3, 6, 7, 255, 255, 255, 255], [0, 2, 3, 6, 7, 255, 255, 255], [1, 2, 3, 6, 7, 255, 255, 255], [0, 1, 2, 3, 6, 7, 255, 255], [4, 6, 7, 255, 255, 255, 255, 255], [0, 4, 6, 7, 255, 255, 255, 255], [1, 4, 6, 7, 255, 255, 255, 255], [0, 1, 4, 6, 7, 255, 255, 255], [2, 4, 6, 7, 255, 255, 255, 255], [0, 2, 4, 6, 7, 255, 255, 255], [1, 2, 4, 6, 7, 255, 255, 255], [0, 1, 2, 4, 6, 7, 255, 255], [3, 4, 6, 7, 255, 255, 255, 255], [0, 3, 4, 6, 7, 255, 255, 255], [1, 3, 4, 6, 7, 255, 255, 255], [0, 1, 3, 4, 6, 7, 255, 255], [2, 3, 4, 6, 7, 255, 255, 255], [0, 2, 3, 4, 6, 7, 255, 255], [1, 2, 3, 4, 6, 7, 255, 255], [0, 1, 2, 3, 4, 6, 7, 255], [5, 6, 7, 255, 255, 255, 255, 255], [0, 5, 6, 7, 255, 255, 255, 255], [1, 5, 6, 7, 255, 255, 255, 255], [0, 1, 5, 6, 7, 255, 255, 255], [2, 5, 6, 7, 255, 255, 255, 255], [0, 2, 5, 6, 7, 255, 255, 255], [1, 2, 5, 6, 7, 255, 255, 255], [0, 1, 2, 5, 6, 7, 255, 255], [3, 5, 6, 7, 255, 255, 255, 255], [0, 3, 5, 6, 7, 255, 255, 255], [1, 3, 5, 6, 7, 255, 255, 255], [0, 1, 3, 5, 6, 7, 255, 255], [2, 3, 5, 6, 7, 255, 255, 255], [0, 2, 3, 5, 6, 7, 255, 255], [1, 2, 3, 5, 6, 7, 255, 255], [0, 1, 2, 3, 5, 6, 7, 255], [4, 5, 6, 7, 255, 255, 255, 255], [0, 4, 5, 6, 7, 255, 255, 255], [1, 4, 5, 6, 7, 255, 255, 255], [0, 1, 4, 5, 6, 7, 255, 255], [2, 4, 5, 6, 7, 255, 255, 255], [0, 2, 4, 5, 6, 7, 255, 255], [1, 2, 4, 5, 6, 7, 255, 255], [0, 1, 2, 4, 5, 6, 7, 255], [3, 4, 5, 6, 7, 255, 255, 255], [0, 3, 4, 5, 6, 7, 255, 255], [1, 3, 4, 5, 6, 7, 255, 255], [0, 1, 3, 4, 5, 6, 7, 255], [2, 3, 4, 5, 6, 7, 255, 255], [0, 2, 3, 4, 5, 6, 7, 255], [1, 2, 3, 4, 5, 6, 7, 255], [0, 1, 2, 3, 4, 5, 6, 7]];

/// A placeholder if byte b contains no i-th zero/one
const NOT_FOUND: u8 = 0xFF;

/// Get the index of the `index`-th zero/one inside the `data`
pub fn select_with_table(bit: bool, data: usize, index: usize) -> Option<usize> {
    // there are only at most as many zeroes as bits in data
    if index > usize::BITS as usize {
        return None;
    }
    // the feature `USE_SELECT_TABLE` decides whether the lookup table should be used or a naive approach
    #[cfg(feature = "USE_SELECT_TABLE")]
    // A small block is smaller than `large_block_size` <= `bit_vector.len().ilog2()` <= 64 
    // => data being usize is sufficient
    // => only using a lookup table would require an array with 2⁶⁴ entries, which is too big.
    // We instead split the data up into bytes and determine the bytes which contains the `index`-th zero/one.
    // After that we use a smaller lookup table to get the index of the `index`-th zero/one inside the byte.
    // Because our lookup table only maps bytes it only has to have 256 entries.
    if !bit {
        let bytes = data.to_le_bytes();
        let mut index = index;
        let mut i = 0;

        // Loop until we reach the bytes which contains the `index`-th zero
        // If (index +1 ) is larger than the number of zeroes in the current byte we have to decrease index by that amount and check the next byte.
        // If (index + 1) is less or equal than the number of zeroes in the current byte we can stop looping because we found the bytes which contains the zero we are looking for.
        // We have to check index + 1 and not just index because we count the zeroes zero-based
        while (index + 1) > bytes[i].count_zeros() as usize && i < bytes.len() {
            // we can efficiently determine the numbers of zeros inside the byte
            index -= bytes[i].count_zeros() as usize;
            i += 1;
        }
        // get the index of the `index`-th zero in the bytes which contains the `index`-th zero
        let result = LOOKUP_TABLE_ZERO[bytes[i] as usize][index] as usize + i * 8;
        // if there is no `index`-th zero in `bytes[i]` the lookup table will return `NOT_FOUND`
        if result >= NOT_FOUND as usize {
            None
        } else {
            Some(result)
        }
    } else {
        let bytes = data.to_le_bytes();
        let mut index = index;
        let mut i = 0;

        // loop until we reach the bytes which contains the `index`-th one
        while (index + 1) > bytes[i].count_ones() as usize && i < bytes.len() {
            index -= bytes[i].count_ones() as usize;
            i += 1;
        }
        // get the index of the `index`-th one in the bytes which contains the `index`-th one
        let result = LOOKUP_TABLE_ONE[bytes[i] as usize][index] as usize + i * 8;
        if result >=  NOT_FOUND as usize {
            None
        } else {
            Some(result)
        }
    }
    #[cfg(not(feature = "USE_SELECT_TABLE"))]
    // Perform naive lookup
    generate_table_helper(bit, data, index)
}

/// Generates the select lookup table
#[allow(dead_code)]
fn generate_table(bit: bool) -> [[u8; 8]; 256] {
    let mut table: [[u8; 8]; 256] = [[0; 8]; 256];
    // Loop through all 256 possible values
    for (i, data_entry) in table.iter_mut().enumerate() {
        // Loop through all possible indices inside the byte
        for j in 0..8 {
            data_entry[j] = generate_table_helper(bit, i, j).unwrap_or(NOT_FOUND as usize) as u8;
        }
    }
    table
}

/// Generates one row of the lookup table
#[allow(dead_code)]
fn generate_table_helper(bit: bool, data: usize, index: usize) -> Option<usize> {
    let mut data = data;
    let mut zero_counter = 0;
    // naively loop through the bits of the data and count the zeroes/ones
    for i in 0..usize::BITS {
        if data & 1 == if bit { 1 } else { 0 } {
            // return the index of the `index`-th zero/one
            if zero_counter == index {
                return Some(i as usize);
            }
            zero_counter += 1;
        }
        data >>= 1;
    }
    None
}

#[cfg(test)]
pub mod test {
    use crate::select_table::select_with_table;

    #[test]
    fn test_select_with_table() {
        let input = 0b01010100_01100010_01111111_00011100_10000001_00001111_01010101_10010111;
        let mut data = input;
        let mut zero_counter = 0;
        for i in 0..64 {
            if data & 1 == 0 {
                assert_eq!(select_with_table(false, input, zero_counter), Some(i));
                zero_counter += 1;
            }
            data >>= 1;
        }
    }
}
